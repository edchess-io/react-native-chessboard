{"version":3,"names":["width","SCREEN_WIDTH","Dimensions","get","DEFAULT_BOARD_SIZE","Math","floor","defaultChessboardProps","gestureEnabled","colors","black","white","lastMoveHighlight","checkmateHighlight","promotionPieceButton","suggested","text","durations","move","withLetters","withNumbers","boardSize","pieceSize","playersColor","ChessboardPropsContext","React","createContext","ChessboardPropsContextProvider","memo","children","rest","value","useMemo","data"],"sources":["index.tsx"],"sourcesContent":["import type { Move } from 'chess.js';\nimport React, { useMemo } from 'react';\nimport { Dimensions } from 'react-native';\nimport type { PieceType } from '../../types';\n\nimport type { ChessboardState } from '../../helpers/get-chessboard-state';\n\ntype ChessMoveInfo = {\n  move: Move;\n  state: ChessboardState & { in_promotion: boolean };\n};\n\ntype ChessboardColorsType = {\n  white?: string;\n  black?: string;\n  lastMoveHighlight?: string;\n  checkmateHighlight?: string;\n  promotionPieceButton?: string;\n  suggested?: string;\n  text?: string;\n};\n\ntype ChessboardDurationsType = {\n  move?: number;\n};\n\ntype ChessboardProps = {\n  /**\n   * Enables gestures for chess pieces.\n   */\n  gestureEnabled?: boolean;\n  /**\n   * Indicates the initial fen position of the chessboard.\n   */\n  fen?: string;\n  /**\n   * Decides whether or not to show the letters on the bottom horizontal axis of the chessboard.\n   */\n  withLetters?: boolean;\n  /**\n   * Decides whether or not to show the letters on the bottom horizontal axis of the chessboard.\n   */\n  withNumbers?: boolean;\n  /**\n   * Indicates the chessboard width and height.\n   */\n  boardSize?: number;\n  /**\n   *\n   * It gives the possibility to customise the chessboard pieces.\n   *\n   * In detail, it takes a PieceType as input, which is constructed as follows:\n   */\n  renderPiece?: (piece: PieceType) => React.ReactElement | null;\n  /**\n   * It's a particularly useful callback if you want to execute an instruction after a move.\n   */\n  onMove?: (info: ChessMoveInfo) => void;\n  /**\n   * Useful if you want to customise the default colors used in the chessboard.\n   */\n  colors?: ChessboardColorsType;\n  /**\n   * Useful if you want to customise the default durations used in the chessboard (in milliseconds).\n   */\n  durations?: ChessboardDurationsType;\n  /**\n   * Indicates which color is being played by the user. Selected color is rendered in the bottom of the board.\n   */\n  playersColor?: Move['color'];\n};\n\ntype ChessboardContextType = ChessboardProps &\n  Required<\n    Pick<\n      ChessboardProps,\n      'gestureEnabled' | 'withLetters' | 'withNumbers' | 'boardSize'\n    >\n  > & { pieceSize: number } & {\n    colors: Required<ChessboardColorsType>;\n    durations: Required<ChessboardDurationsType>;\n  };\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window');\nconst DEFAULT_BOARD_SIZE = Math.floor(SCREEN_WIDTH / 8) * 8;\n\nconst defaultChessboardProps: ChessboardContextType = {\n  gestureEnabled: true,\n  colors: {\n    black: '#454C54',\n    white: '#676E76',\n    lastMoveHighlight: 'rgba(151, 189, 227, 0.50)',\n    checkmateHighlight: '#EE3232',\n    promotionPieceButton: 'transparent',\n    suggested: 'transparent',\n    text: '#C1C4C7',\n  },\n  durations: {\n    move: 150,\n  },\n  withLetters: true,\n  withNumbers: true,\n  boardSize: DEFAULT_BOARD_SIZE,\n  pieceSize: DEFAULT_BOARD_SIZE / 8,\n  playersColor: 'w',\n};\n\nconst ChessboardPropsContext = React.createContext<ChessboardContextType>(\n  defaultChessboardProps\n);\n\nconst ChessboardPropsContextProvider: React.FC<ChessboardProps> = React.memo(\n  ({ children, ...rest }) => {\n    const value = useMemo(() => {\n      const data = {\n        ...defaultChessboardProps,\n        ...rest,\n        colors: { ...defaultChessboardProps.colors, ...rest.colors },\n        durations: { ...defaultChessboardProps.durations, ...rest.durations },\n      };\n      return { ...data, pieceSize: data.boardSize / 8 };\n    }, [rest]);\n\n    return (\n      <ChessboardPropsContext.Provider value={value}>\n        {children}\n      </ChessboardPropsContext.Provider>\n    );\n  }\n);\n\nexport {\n  ChessboardPropsContextProvider,\n  ChessboardPropsContext,\n  DEFAULT_BOARD_SIZE,\n};\n// eslint-disable-next-line no-undef\nexport type { ChessboardProps, ChessMoveInfo };\n"],"mappings":";;;;;;;AACA;;AACA;;;;;;AAiFA,MAAM;EAAEA,KAAK,EAAEC;AAAT,IAA0BC,uBAAA,CAAWC,GAAX,CAAe,QAAf,CAAhC;;AACA,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAY,GAAG,CAA1B,IAA+B,CAA1D;;AAEA,MAAMM,sBAA6C,GAAG;EACpDC,cAAc,EAAE,IADoC;EAEpDC,MAAM,EAAE;IACNC,KAAK,EAAE,SADD;IAENC,KAAK,EAAE,SAFD;IAGNC,iBAAiB,EAAE,2BAHb;IAINC,kBAAkB,EAAE,SAJd;IAKNC,oBAAoB,EAAE,aALhB;IAMNC,SAAS,EAAE,aANL;IAONC,IAAI,EAAE;EAPA,CAF4C;EAWpDC,SAAS,EAAE;IACTC,IAAI,EAAE;EADG,CAXyC;EAcpDC,WAAW,EAAE,IAduC;EAepDC,WAAW,EAAE,IAfuC;EAgBpDC,SAAS,EAAEjB,kBAhByC;EAiBpDkB,SAAS,EAAElB,kBAAkB,GAAG,CAjBoB;EAkBpDmB,YAAY,EAAE;AAlBsC,CAAtD;;AAqBA,MAAMC,sBAAsB,gBAAGC,cAAA,CAAMC,aAAN,CAC7BnB,sBAD6B,CAA/B;;;;AAIA,MAAMoB,8BAAyD,gBAAGF,cAAA,CAAMG,IAAN,CAChE,QAA2B;EAAA,IAA1B;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAA0B;EACzB,MAAMC,KAAK,GAAG,IAAAC,cAAA,EAAQ,MAAM;IAC1B,MAAMC,IAAI,GAAG,EACX,GAAG1B,sBADQ;MAEX,GAAGuB,IAFQ;MAGXrB,MAAM,EAAE,EAAE,GAAGF,sBAAsB,CAACE,MAA5B;QAAoC,GAAGqB,IAAI,CAACrB;MAA5C,CAHG;MAIXQ,SAAS,EAAE,EAAE,GAAGV,sBAAsB,CAACU,SAA5B;QAAuC,GAAGa,IAAI,CAACb;MAA/C;IAJA,CAAb;IAMA,OAAO,EAAE,GAAGgB,IAAL;MAAWX,SAAS,EAAEW,IAAI,CAACZ,SAAL,GAAiB;IAAvC,CAAP;EACD,CARa,EAQX,CAACS,IAAD,CARW,CAAd;EAUA,oBACE,6BAAC,sBAAD,CAAwB,QAAxB;IAAiC,KAAK,EAAEC;EAAxC,GACGF,QADH,CADF;AAKD,CAjB+D,CAAlE,C,CAyBA"}