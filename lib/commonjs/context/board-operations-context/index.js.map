{"version":3,"names":["BoardOperationsContext","createContext","BoardOperationsContextProviderComponent","React","forwardRef","ref","children","controller","contextController","chess","useChessEngine","setBoard","useSetBoard","pieceSize","onMove","onChessboardMoveCallback","playersColor","useChessboardProps","toTranslation","isBlackPiecePosition","useReversePiecePosition","selectableSquares","useSharedValue","selectedSquare","showPromotionDialog","useBoardPromotion","pieceRefs","usePieceRefs","isPieceGestureInProgress","setIsPieceGestureInProgress","useState","turn","useImperativeHandle","reset","value","resetAllHighlightedSquares","isPromoting","useCallback","from","to","includes","val","x","Math","floor","y","piece","board","type","PAWN","color","WHITE","BLACK","moveProgrammatically","promotionPiece","move","promotion","checkIsCheckState","checkIsCheckMateState","state","getChessboardState","in_promotion","lastMove","highlight","square","chessTurn","current","enable","onSelect","onSelectPiece","validSquares","moves","map","splittedSquare","split","length","splittedSquareValue","moveTo","useMemo","BoardOperationsContextProvider","memo"],"sources":["index.tsx"],"sourcesContent":["import type { PieceType, Square } from 'chess.js';\nimport React, {\n  createContext,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport type Animated from 'react-native-reanimated';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getChessboardState } from '../../helpers/get-chessboard-state';\n\nimport { useReversePiecePosition } from '../../notation';\nimport { useSetBoard } from '../board-context/hooks';\nimport { useBoardPromotion } from '../board-promotion-context/hooks';\nimport type {\n  ChessboardContextRef,\n  ChessboardRef,\n} from '../board-refs-context';\nimport { usePieceRefs } from '../board-refs-context/hooks';\nimport { useChessEngine } from '../chess-engine-context/hooks';\nimport { useChessboardProps } from '../props-context/hooks';\n\ntype BoardOperationsContextType = {\n  selectableSquares: Animated.SharedValue<Square[]>;\n  onMove: (from: Square, to: Square) => void;\n  onSelectPiece: (square: Square) => void;\n  moveTo: (to: Square) => void;\n  isPromoting: (from: Square, to: Square) => boolean;\n  selectedSquare: Animated.SharedValue<Square | null>;\n  turn: Animated.SharedValue<'w' | 'b'>;\n  moveProgrammatically: (\n    from: Square,\n    to: Square,\n    promotionPiece?: PieceType\n  ) => void;\n  isPieceGestureInProgress: boolean;\n  setIsPieceGestureInProgress: (value: boolean) => void;\n};\n\nconst BoardOperationsContext = createContext<BoardOperationsContextType>(\n  {} as any\n);\n\nexport type BoardOperationsRef = {\n  reset: () => void;\n};\n\nconst BoardOperationsContextProviderComponent = React.forwardRef<\n  BoardOperationsRef,\n  {\n    controller?: ChessboardRef;\n    contextController?: ChessboardContextRef;\n    children?: React.ReactNode;\n  }\n>(({ children, controller, contextController }, ref) => {\n  const chess = useChessEngine();\n  const setBoard = useSetBoard();\n  const {\n    pieceSize,\n    onMove: onChessboardMoveCallback,\n    playersColor,\n  } = useChessboardProps();\n  const { toTranslation, isBlackPiecePosition } = useReversePiecePosition();\n  const selectableSquares = useSharedValue<Square[]>([]);\n  const selectedSquare = useSharedValue<Square | null>(null);\n  const { showPromotionDialog } = useBoardPromotion();\n  const pieceRefs = usePieceRefs();\n  const [isPieceGestureInProgress, setIsPieceGestureInProgress] =\n    useState<boolean>(false);\n\n  const turn = useSharedValue(chess.turn());\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      reset: () => {\n        selectableSquares.value = [];\n        controller?.resetAllHighlightedSquares();\n        turn.value = chess.turn();\n      },\n    }),\n    [chess, controller, selectableSquares, turn]\n  );\n\n  const isPromoting = useCallback(\n    (from: Square, to: Square) => {\n      if (!to.includes('8') && !to.includes('1')) return false;\n\n      const val = toTranslation(from);\n      const x = Math.floor(val.x / pieceSize);\n      const y = Math.floor(val.y / pieceSize);\n\n      const piece = chess.board()[y][x];\n\n      return (\n        piece?.type === chess.PAWN &&\n        ((to.includes('8') && piece.color === chess.WHITE) ||\n          (to.includes('1') && piece.color === chess.BLACK))\n      );\n    },\n    [chess, pieceSize, toTranslation]\n  );\n\n  const moveProgrammatically = useCallback(\n    (from: Square, to: Square, promotionPiece?: PieceType) => {\n      const move = chess.move({\n        from,\n        to,\n        promotion: promotionPiece as any,\n      });\n\n      turn.value = chess.turn();\n\n      if (move == null) return;\n\n      contextController?.checkIsCheckState();\n      contextController?.checkIsCheckMateState();\n\n      onChessboardMoveCallback?.({\n        move,\n        state: {\n          ...getChessboardState(chess),\n          in_promotion: promotionPiece != null,\n        },\n      });\n\n      setBoard(chess.board());\n    },\n    [chess, contextController, onChessboardMoveCallback, setBoard, turn]\n  );\n\n  const onMove = useCallback(\n    (from: Square, to: Square) => {\n      selectableSquares.value = [];\n      selectedSquare.value = null;\n      const lastMove = { from, to };\n      controller?.resetAllHighlightedSquares();\n      controller?.highlight({ square: lastMove.from });\n      controller?.highlight({ square: lastMove.to });\n\n      const in_promotion = isPromoting(from, to);\n      if (!in_promotion) {\n        moveProgrammatically(from, to);\n        return;\n      }\n\n      const chessTurn = chess.turn();\n\n      if (chessTurn === playersColor) {\n        pieceRefs?.current?.[to]?.current?.enable(false);\n        showPromotionDialog({\n          type: chessTurn,\n          onSelect: (piece) => {\n            moveProgrammatically(from, to, piece);\n            pieceRefs?.current?.[to]?.current?.enable(true);\n          },\n        });\n      }\n    },\n    [\n      chess,\n      controller,\n      isPromoting,\n      moveProgrammatically,\n      pieceRefs,\n      selectableSquares,\n      selectedSquare,\n      showPromotionDialog,\n      playersColor,\n    ]\n  );\n\n  const onSelectPiece = useCallback(\n    (square: Square) => {\n      selectedSquare.value = square;\n\n      const validSquares = (chess.moves({\n        square,\n      }) ?? []) as Square[];\n\n      // eslint-disable-next-line no-shadow\n      selectableSquares.value = validSquares.map((square) => {\n        const splittedSquare = square.split('x');\n        if (splittedSquare.length === 0) {\n          return square;\n        }\n\n        const splittedSquareValue = splittedSquare[splittedSquare.length - 1];\n\n        if (splittedSquareValue === 'O-O') {\n          if (isBlackPiecePosition) {\n            return 'Kg8' as Square;\n          }\n\n          return 'Kg1' as Square;\n        }\n\n        if (splittedSquareValue === 'O-O-O') {\n          if (isBlackPiecePosition) {\n            return 'Kc8' as Square;\n          }\n\n          return 'Kc1' as Square;\n        }\n\n        return splittedSquare[splittedSquare.length - 1] as Square;\n      });\n    },\n    [chess, selectableSquares, selectedSquare, isBlackPiecePosition]\n  );\n\n  const moveTo = useCallback(\n    (to: Square) => {\n      if (selectedSquare.value != null) {\n        controller?.move({ from: selectedSquare.value, to: to });\n        return true;\n      }\n      return false;\n    },\n    [controller, selectedSquare.value]\n  );\n\n  const value = useMemo(() => {\n    return {\n      onMove,\n      onSelectPiece,\n      moveTo,\n      selectableSquares,\n      selectedSquare,\n      isPromoting,\n      turn,\n      moveProgrammatically,\n      isPieceGestureInProgress,\n      setIsPieceGestureInProgress,\n    };\n  }, [\n    isPromoting,\n    moveTo,\n    onMove,\n    onSelectPiece,\n    selectableSquares,\n    selectedSquare,\n    turn,\n    moveProgrammatically,\n    isPieceGestureInProgress,\n    setIsPieceGestureInProgress,\n  ]);\n\n  return (\n    <BoardOperationsContext.Provider value={value}>\n      {children}\n    </BoardOperationsContext.Provider>\n  );\n});\n\nconst BoardOperationsContextProvider = React.memo(\n  BoardOperationsContextProviderComponent\n);\n\nexport { BoardOperationsContextProvider, BoardOperationsContext };\n"],"mappings":"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"}