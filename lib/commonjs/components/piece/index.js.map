{"version":3,"names":["Piece","React","memo","forwardRef","ref","id","startPosition","square","size","chess","useChessEngine","refs","usePieceRefs","pieceEnabled","useSharedValue","isPromoting","useBoardPromotion","onSelectPiece","onMove","selectedSquare","turn","isPieceGestureInProgress","setIsPieceGestureInProgress","useBoardOperations","isPieceActive","setIsPieceActive","useState","pieceSize","durations","move","moveDuration","gestureEnabled","gestureEnabledFromChessboardProps","playersColor","useChessboardProps","useDerivedValue","value","charAt","toPosition","toTranslation","isBlackPiecePosition","useReversePiecePosition","isGestureActive","offsetX","offsetY","borderColor","translateX","x","translateY","y","validateMove","useCallback","from","to","moves","verbose","find","m","wrappedOnMoveForJSThread","moveTo","Promise","resolve","withTiming","duration","isFinished","runOnJS","undefined","movePiece","useImperativeHandle","enable","active","onStartTap","globalMoveTo","current","handleOnBegin","currentSquare","previousTappedSquare","gestureProgress","Gesture","Pan","enabled","onBegin","onStart","onUpdate","translationX","translationY","onEnd","onFinalize","gestureDisabled","gesture","useMemo","style","useAnimatedStyle","justifyContent","alignItems","position","zIndex","borderWidth","backgroundColor","boxSize","width","height","transform","rotate","underlay","translation","borderRadius","prev","next"],"sources":["index.tsx"],"sourcesContent":["import type { Move, Square } from 'chess.js';\nimport React, {\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, {\n  runOnJS,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withTiming,\n} from 'react-native-reanimated';\nimport { useChessboardProps } from '../../context/props-context/hooks';\nimport { useBoardOperations } from '../../context/board-operations-context/hooks';\nimport { useBoardPromotion } from '../../context/board-promotion-context/hooks';\nimport { usePieceRefs } from '../../context/board-refs-context/hooks';\nimport { useChessEngine } from '../../context/chess-engine-context/hooks';\nimport { useReversePiecePosition } from '../../notation';\nimport type { PieceType, Vector } from '../../types';\n\nimport { ChessPiece } from './visual-piece';\n\ntype PieceProps = {\n  id: PieceType;\n  startPosition: Vector;\n  square: Square;\n  size: number;\n};\n\nexport type ChessPieceRef = {\n  moveTo: (square: Square) => Promise<Move | undefined>;\n  enable: (activate: boolean) => void;\n};\n\nconst Piece = React.memo(\n  React.forwardRef<ChessPieceRef, PieceProps>(\n    ({ id, startPosition, square, size }, ref) => {\n      const chess = useChessEngine();\n      const refs = usePieceRefs();\n      const pieceEnabled = useSharedValue(true);\n      const { isPromoting } = useBoardPromotion();\n      const {\n        onSelectPiece,\n        onMove,\n        selectedSquare,\n        turn,\n        isPieceGestureInProgress,\n        setIsPieceGestureInProgress,\n      } = useBoardOperations();\n\n      const [isPieceActive, setIsPieceActive] = useState<boolean>(false);\n\n      const {\n        pieceSize,\n        durations: { move: moveDuration },\n        gestureEnabled: gestureEnabledFromChessboardProps,\n        playersColor,\n      } = useChessboardProps();\n\n      const gestureEnabled = useDerivedValue(\n        () =>\n          turn.value === id.charAt(0) &&\n          turn.value === playersColor &&\n          gestureEnabledFromChessboardProps,\n        [id, gestureEnabledFromChessboardProps]\n      );\n\n      const { toPosition, toTranslation, isBlackPiecePosition } =\n        useReversePiecePosition();\n\n      const isGestureActive = useSharedValue(false);\n      const offsetX = useSharedValue(0);\n      const offsetY = useSharedValue(0);\n      const borderColor = useSharedValue(1);\n      const translateX = useSharedValue(startPosition.x * size);\n      const translateY = useSharedValue(startPosition.y * size);\n\n      const validateMove = useCallback(\n        (from: Square, to: Square) => {\n          return chess\n            .moves({ verbose: true })\n            .find((m) => m.from === from && m.to === to);\n        },\n        [chess]\n      );\n\n      const wrappedOnMoveForJSThread = useCallback(\n        ({ move }: { move: Move }) => {\n          onMove(move.from, move.to);\n        },\n        [onMove]\n      );\n\n      const moveTo = useCallback(\n        (from: Square, to: Square) => {\n          return new Promise<Move | undefined>((resolve) => {\n            const move = validateMove(from, to);\n            const { x, y } = toTranslation(move ? move.to : from);\n            translateX.value = withTiming(x, { duration: moveDuration }, () => {\n              offsetX.value = translateX.value;\n            });\n            translateY.value = withTiming(\n              y,\n              { duration: moveDuration },\n              (isFinished) => {\n                if (!isFinished) return;\n                offsetY.value = translateY.value;\n                isGestureActive.value = false;\n                if (move) {\n                  runOnJS(wrappedOnMoveForJSThread)({ move });\n                  // Ideally I must call the resolve method\n                  // inside the \"wrappedOnMoveForJSThread\" after\n                  // the \"onMove\" function.\n                  // Unfortunately I'm not able to pass a\n                  // function in the RunOnJS params\n                  runOnJS(resolve)(move);\n                } else {\n                  runOnJS(resolve)(undefined);\n                }\n              }\n            );\n          });\n        },\n        [\n          isGestureActive,\n          moveDuration,\n          offsetX,\n          offsetY,\n          toTranslation,\n          translateX,\n          translateY,\n          validateMove,\n          wrappedOnMoveForJSThread,\n        ]\n      );\n\n      const movePiece = useCallback(\n        (to: Square) => {\n          const from = toPosition({ x: offsetX.value, y: offsetY.value });\n          moveTo(from, to);\n        },\n        [moveTo, offsetX.value, offsetY.value, toPosition]\n      );\n\n      useImperativeHandle(\n        ref,\n        () => {\n          return {\n            moveTo: (to: Square) => {\n              return moveTo(square, to);\n            },\n            enable: (active: boolean) => {\n              pieceEnabled.value = active;\n            },\n          };\n        },\n        [moveTo, pieceEnabled, square]\n      );\n\n      const onStartTap = useCallback(\n        // eslint-disable-next-line no-shadow\n        (square: Square) => {\n          'worklet';\n          if (!onSelectPiece) {\n            return;\n          }\n          runOnJS(onSelectPiece)(square);\n        },\n        [onSelectPiece]\n      );\n\n      const globalMoveTo = useCallback(\n        (move: Move) => {\n          refs?.current?.[move.from].current?.moveTo?.(move.to);\n        },\n        [refs]\n      );\n\n      const handleOnBegin = useCallback(() => {\n        const currentSquare = toPosition({\n          x: translateX.value,\n          y: translateY.value,\n        });\n\n        const previousTappedSquare = selectedSquare.value;\n        const move =\n          previousTappedSquare &&\n          validateMove(previousTappedSquare, currentSquare);\n\n        if (move) {\n          runOnJS(globalMoveTo)(move);\n          return;\n        }\n        if (!gestureEnabled.value) return;\n        borderColor.value = withTiming(0);\n        onStartTap(square);\n      }, [\n        borderColor,\n        gestureEnabled.value,\n        globalMoveTo,\n        onStartTap,\n        selectedSquare.value,\n        square,\n        toPosition,\n        translateX.value,\n        translateY.value,\n        validateMove,\n      ]);\n\n      const gestureProgress = Gesture.Pan()\n        .enabled(!isPromoting && pieceEnabled.value)\n        .onBegin(() => {\n          runOnJS(setIsPieceActive)(true);\n          runOnJS(setIsPieceGestureInProgress)(true);\n          offsetX.value = translateX.value;\n          offsetY.value = translateY.value;\n          runOnJS(handleOnBegin)();\n        })\n        .onStart(() => {\n          if (!gestureEnabled.value) return;\n          isGestureActive.value = true;\n        })\n        .onUpdate(({ translationX, translationY }) => {\n          if (!gestureEnabled.value) return;\n\n          if (isBlackPiecePosition) {\n            translateX.value = offsetX.value - translationX;\n            translateY.value = offsetY.value - translationY;\n\n            return;\n          }\n\n          translateX.value = offsetX.value + translationX;\n          translateY.value = offsetY.value + translationY;\n        })\n        .onEnd(() => {\n          if (!gestureEnabled.value) return;\n          runOnJS(movePiece)(\n            toPosition({ x: translateX.value, y: translateY.value })\n          );\n        })\n        .onFinalize(() => {\n          runOnJS(setIsPieceActive)(false);\n          runOnJS(setIsPieceGestureInProgress)(false);\n          borderColor.value = withTiming(1);\n        });\n\n      const gestureDisabled = Gesture.Pan().enabled(false);\n\n      const gesture = useMemo(() => {\n        if (isPieceGestureInProgress && !isPieceActive) {\n          return gestureDisabled;\n        }\n\n        return gestureProgress;\n      }, [\n        isPieceGestureInProgress,\n        isPieceActive,\n        gestureProgress,\n        gestureDisabled,\n      ]);\n\n      const style = useAnimatedStyle(() => {\n        if (isBlackPiecePosition) {\n          return {\n            justifyContent: 'center',\n            alignItems: 'center',\n            position: 'absolute',\n            zIndex: selectedSquare.value ? 100 : 10,\n            borderWidth: 0,\n            backgroundColor:\n              selectedSquare.value === square && !isGestureActive.value\n                ? 'rgba(151, 189, 227, 0.50)' //`rgba(44, 141, 255, ${(borderColor.value / 5).toFixed(2)})`\n                : 'transparent',\n            boxSize: 'border-box',\n            width: pieceSize,\n            height: pieceSize,\n            transform: [\n              { translateX: translateX.value },\n              { translateY: translateY.value },\n              { rotate: '180deg' },\n            ],\n          };\n        }\n\n        return {\n          justifyContent: 'center',\n          alignItems: 'center',\n          position: 'absolute',\n          zIndex: selectedSquare.value ? 100 : 10,\n          borderWidth: 0,\n          backgroundColor:\n            selectedSquare.value === square && !isGestureActive.value\n              ? 'rgba(151, 189, 227, 0.50)' //`rgba(44, 141, 255, ${(borderColor.value / 5).toFixed(2)})`\n              : 'transparent',\n          boxSize: 'border-box',\n          width: pieceSize,\n          height: pieceSize,\n          transform: [\n            { translateX: translateX.value },\n            { translateY: translateY.value },\n          ],\n        };\n      }, [selectedSquare.value, isBlackPiecePosition]);\n\n      const underlay = useAnimatedStyle(() => {\n        const position = toPosition({\n          x: translateX.value,\n          y: translateY.value,\n        });\n        const translation = toTranslation(position);\n        return {\n          position: 'absolute',\n          width: size * 2,\n          height: size * 2,\n          borderRadius: size,\n          zIndex: 0,\n          backgroundColor: 'transparent',\n          transform: [\n            { translateX: translation.x - size / 2 },\n            { translateY: translation.y - size / 2 },\n          ],\n        };\n      }, [size]);\n\n      return (\n        <>\n          <Animated.View style={underlay} />\n          <GestureDetector gesture={gesture}>\n            <Animated.View style={style}>\n              <ChessPiece id={id} />\n            </Animated.View>\n          </GestureDetector>\n        </>\n      );\n    }\n  ),\n  (prev, next) =>\n    prev.id === next.id &&\n    prev.size === next.size &&\n    prev.square === next.square\n);\n\nexport default Piece;\n"],"mappings":"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"}